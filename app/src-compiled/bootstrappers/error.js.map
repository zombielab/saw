{"version":3,"sources":["../../src/bootstrappers/error.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,MAAM,YAAN,CAAmB;AACf,WAAO,SAAP,CAAiB,GAAjB,EAAsB;AAClB;AACA,YAAI,EAAJ,CAAO,OAAP,EAAiB,KAAD,IAAW;AACvB,gBAAI,OAAJ,CAAY,KAAZ;AACH,SAFD;;AAIA,YAAI,GAAJ;AAAA,uDAAQ,WAAM,GAAN,EAAW,IAAX,EAAoB;AACxB,oBAAI;AACA,0BAAM,MAAN;;AAEA,wBAAI,IAAI,MAAJ,IAAc,GAAlB,EAAuB;AACnB,4BAAI,KAAJ,CAAU,GAAV;AACH;AACJ,iBAND,CAME,OAAO,KAAP,EAAc;AACZ;AACA,wBAAI,MAAM,IAAN,IAAc,QAAlB,EAA4B;AACxB,8BAAM,MAAN,GAAe,GAAf;AACH;;AAED,wBAAI,OAAO,MAAM,MAAb,KAAwB,QAAxB,IAAoC,CAAC,mBAAS,MAAM,MAAf,CAAzC,EAAiE;AAC7D,8BAAM,MAAN,GAAe,GAAf;AACH;;AAED,wBAAI,MAAJ,GAAa,MAAM,MAAnB;;AAEA;AACA,wBAAI,GAAJ,CAAQ,IAAR,CAAa,OAAb,EAAsB,KAAtB,EAA6B,GAA7B;;AAEA,4BAAQ,IAAI,OAAJ,CAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CAAR;AACI,6BAAK,MAAL;AACI,gCAAI,IAAJ,GAAW,kBAAX;AACA,gCAAI,IAAJ,GAAW;AACP,wCAAQ,MAAM,MADP;AAEP,yCAAS,MAAM,MAAN,GAAe,MAAM,OAArB,GAA+B,mBAAS,MAAM,MAAf;AAFjC,6BAAX;;AAKA;AACA,gCAAI,oBAAO,GAAP,CAAW,WAAX,MAA4B,IAAhC,EAAsC;AAClC,oCAAI,IAAJ,CAAS,KAAT,GAAiB,MAAM,KAAvB;AACH;AACD;AACJ,6BAAK,MAAL;AACI,gCAAI,IAAJ,GAAW,YAAX;;AAEA;AACA,gCAAI,oBAAO,GAAP,CAAW,WAAX,MAA4B,IAAhC,EAAsC;AAClC,oCAAI,IAAJ,GAAW,MAAM,KAAjB;AACH,6BAFD,MAEO;AACH,oCAAI,IAAJ,GAAW,MAAM,MAAN,GAAe,MAAM,OAArB,GAA+B,mBAAS,MAAM,MAAf,CAA1C;AACH;AACD;AACJ,6BAAK,MAAL;AACA;AACI,gCAAI,IAAJ,GAAW,WAAX;;AAEA;AACA,gCAAI,oBAAO,GAAP,CAAW,WAAX,MAA4B,IAAhC,EAAsC;AAClC,oCAAI,IAAJ,GAAW,UAAU,MAAM,KAAhB,GAAwB,QAAnC;AACH,6BAFD,MAEO;AACH;AACA,oCAAI,SAAS,MAAM,kBAAK,MAAL,CAAa,UAAQ,MAAM,MAAO,GAAlC,CAAnB;;AAEA;AACA;AACA,oCAAI,MAAJ,EAAY;AACR,wCAAI,IAAJ,GAAW,MAAM,kBAAK,MAAL,CAAa,UAAQ,MAAM,MAAO,GAAlC,CAAjB;AACH,iCAFD,MAEO;AACH,wCAAI,IAAJ,GAAW,YAAX;AACA,wCAAI,IAAJ,GAAW,MAAM,MAAN,GAAe,MAAM,OAArB,GAA+B,mBAAS,MAAM,MAAf,CAA1C;AACH;AACJ;AACD;AA3CR;AA6CH;AACJ,aApED;;AAAA;AAAA;AAAA;AAAA;AAqEH;AA5Ec;;kBA+EJ,Y","file":"error.js","sourcesContent":["\"use strict\";\n\nimport statuses from \"statuses\";\nimport config from \"saw-config\";\nimport view from \"saw-view\";\n\nclass Bootstrapper {\n    static bootstrap(app) {\n        // Resetting default koa app error handler\n        app.on(\"error\", (error) => {\n            app.onerror(error);\n        });\n\n        app.use(async(ctx, next) => {\n            try {\n                await next();\n\n                if (ctx.status == 404) {\n                    ctx.throw(404);\n                }\n            } catch (error) {\n                // Setting error code\n                if (error.code == \"ENOENT\") {\n                    error.status = 404;\n                }\n\n                if (typeof error.status !== \"number\" || !statuses[error.status]) {\n                    error.status = 500;\n                }\n\n                ctx.status = error.status;\n\n                // Delegating to app\n                ctx.app.emit(\"error\", error, ctx);\n\n                switch (ctx.accepts(\"html\", \"text\", \"json\")) {\n                    case \"json\":\n                        ctx.type = \"application/json\";\n                        ctx.body = {\n                            status: error.status,\n                            message: error.expose ? error.message : statuses[error.status]\n                        };\n\n                        // Pushing error stack into json response\n                        if (config.get(\"app.debug\") === true) {\n                            ctx.body.debug = error.stack;\n                        }\n                        break;\n                    case \"text\":\n                        ctx.type = \"text/plain\";\n\n                        // Showing error stack in browser\n                        if (config.get(\"app.debug\") === true) {\n                            ctx.body = error.stack;\n                        } else {\n                            ctx.body = error.expose ? error.message : statuses[error.status];\n                        }\n                        break;\n                    case \"html\":\n                    default:\n                        ctx.type = \"text/html\";\n\n                        // Showing error stack in browser\n                        if (config.get(\"app.debug\") === true) {\n                            ctx.body = \"<pre>\" + error.stack + \"</pre>\";\n                        } else {\n                            // Check if there is a view for the current error status\n                            var exists = await view.exists(`error/${error.status}`);\n\n                            // Then if it\"s the case render the view\n                            // And inject it to the response body\n                            if (exists) {\n                                ctx.body = await view.render(`error/${error.status}`);\n                            } else {\n                                ctx.type = \"text/plain\";\n                                ctx.body = error.expose ? error.message : statuses[error.status];\n                            }\n                        }\n                        break;\n                }\n            }\n        });\n    }\n}\n\nexport default Bootstrapper;"]}